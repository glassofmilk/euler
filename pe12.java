package euler;

import java.util.HashMap;

public class pe12 {
	
	/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

		Let us list the factors of the first seven triangle numbers:

		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28
		We can see that 28 is the first triangle number to have over five divisors.

		What is the value of the first triangle number to have over five hundred divisors?*/
	
	public static void main(String[] args) {
		System.out.println(getAnswer());
	}
	
	public static int getAnswer() {
		int answer = 0;
		
		for (int i = 1; answer == 0; i++) {			//Get triangle numbers and count their divisors, looking for > 500
			int tri = getNthTriangle(i);
			int divisors = getNumOfDivisors(tri);
			if (divisors > 500) {
				answer = tri;
			}
		}
		
		return answer;
	}
	
	public static int getNthTriangle(int n) {		//Returns n + (n-1) + (n-2) + ... + (n-n)
		int tri = 0;
		
		for (int i = 1; i <= n; i++) {
			tri += i;
		}
		
		return tri;
	}
	
	public static int getNumOfDivisors(int n) {							//Returns number of divisors of n
		HashMap<Integer, Integer> primeFactors = getPrimeFactors(n);	//Get prime factorization of n as HashMap<prime, exponent>
		int product = 1;												//Number of divisors is equal to product of each (exponent + 1)
		
		for(int key : primeFactors.keySet()) {
			product *= primeFactors.get(key) + 1;
		}
		
		return product;
	}
	
	private static HashMap<Integer, Integer> getPrimeFactors(int n) {	//Returns prime factorization of n as HashMap<prime, exponent>
		HashMap<Integer, Integer> factorMap = new HashMap<Integer, Integer>();
		int current = n;
		
		for (int i = 2; current > 1; i++) {
			
			while (current % i == 0) {
				current = current / i;
				if ( ! factorMap.containsKey(i) ) {
					factorMap.put(i, 0);
				}
				factorMap.put(i, factorMap.get(i) + 1);
			}
		}
		
		return factorMap;
	}
}
